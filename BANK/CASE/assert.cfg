#info: assertions
#assert uses: depend() 
assert_file_exist_test(){
    (assert file_exist '')
    indicator

}
depend(){
    use print
    local str="$1"
    local res=1
    ( exec &>/dev/null; set -o pipefail; type $str | grep -v function )
    res=$?
    if [ $res -ne 0 ];then
        print error "[MISSING DEPENDENCIES] $str"
    fi
    return $res
}
#http://hacktux.com/bash/ampersand
assertEqual(){
    $str_caller
    use print
    use indicator
    use commander
    use exiting
    print func
    local str1="$1"
    local str2="$2"
    commander test "$str1" = "$str2" 
    indicator $?
    exiting
}



assert_func_exist_test(){
    ( assert func_exist assert )
}
assert_file_store_zero_test(){
    set -x
    file=/tmp/test

    echo 1 >$file
    assert_file_store_zero $file
    return
    rm1 $file
    assert_file_store_zero $file

    touch $file
    assert_file_store_zero $file

    echo 0 >$file
    assert_file_store_zero $file



}
assert_left_bigger_test(){
    echo true
    cmd="assert left_bigger 4 1"
    commander "$cmd"
    indicator
}
assert_nice(){
    local str_help_the_user="$1"

    local args=( $@ )
    local cmd="${args[@]}"

    ( assert "$cmd" )
    local res=$?
    if [ $res -eq 1  ];then
        echo "[H E L P ?]"  
        echo "[Options] str_help_the_user"
    fi
    go_home
}

assert(){
    use trace
    use print
    local max=$#
    local str_caller="$( caller )"
    [ $max  -gt 1  ]  ||  { echo 1>&2 "[Assert Error] need 2 args, got: $max"; return 1; }

    local name="$1"
    local item="${2:-}"
    local extra="${3:-}"

    #depend
    #    use cat1

    local res=1
    case $name in
        network_alive)
            use network
            ping1 && { let 'res = 0'; }
            ;;
        url_alive)
            ping1 "$item" && { let 'res = 0'; }
            ;;
        user_is_root) 
            [ "$(id -u)" = "0" ] && { let 'res = 0'; }
            ;;
        left_bigger)
            [ $item -gt $extra ] && { let 'res = 0'; }
            ;;

        equal_to)
            [ $item -eq $extra ] && { let 'res = 0'; }
            ;;

        var_exist)
            [ -v "$item" ] && { let 'res = 0'; }
            ;; 
        string_exist)
            [ -n "$item" ] && { let 'res = 0'; }
            ;; 
        string_has_content)
            test -n "$item" && res=0
            ;;
        file_exist)
            str="$( eval echo $item )"
            [ -f "$str"  ] && { let 'res = 0'; }
            ;; 
        symlink_exist)
            str="$( eval echo $item )"
            [ -L "$str"  ] && { let 'res = 0'; }
            ;; 


        file_has_content)
            local size
            size=$( du -b $file_product | cut  -f1 ) 
            #[ -s "$item" ] 
            [ $size -gt 0 ] && { let 'res = 0'; }

            ;; 
        file_store_zero)
            #pownder: another approach: create a new file with only 1 char: 0 . and compare using: some "diff" utility
            #echo 1>&2 file_store_zero_start

            { str_res=$( cat1 "$item" ); } &&  ( assert is_number "$str_res" ) &&          ( test     $str_res -eq 0  ) && { let 'res = 0'; }
            #echo 1>&2 file_store_zero_end
            ;; 
        util_exist)
            (  depend $item ) && { let 'res = 0'; }
            ;;

        func_exist)
            (  set -o pipefail; type "$item" | grep function &>/dev/null ) && { let 'res = 0'; }
            ;;
        dir_exist)
            [ -d "$item" ] && { let 'res = 0'; }
            ;; 
        is_number)
            re='^[0-9]+$'
            if  [[ $item =~ $re ]] ; then
                let 'res=0'
            fi;
            ;;
        *)
            print error "Assertion not defined: $name "
            echo press assertE for editing the list
            ;;
    esac

    if [ $res -ne 0 ];then
        #        trace "Assert [[ $name ]] $item"
        print error "[ASSERT ERROR]"
        echo 1>&2 "type:  $name"
        echo 1>&2 "item:  $item"
        echo 1>&2 "extra:  $extra"
        echo 1>&2 "[CALLER] $str_caller"
        exit 1
    fi
    return 0
}



export -f assert
export -f assert_nice
export -f depend
export -f assertEqual

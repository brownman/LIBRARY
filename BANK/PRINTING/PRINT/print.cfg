

print_color_n () 
{
    use assert
    if [ $# -gt 1 ];then
        local color=$1
        assert is_number "$color"
        shift
        local args="${@:-?}"
#echo 1>&2 args: __${args}__
        echo -en 1>&2 "\x1B[01;${color}m[*]\x1B[0m ${args} "
    fi
}

print_test(){
    print toilet hi
}
print_g_test(){
    #    print_g gay toilet sdf lsd sld 
    print color 32 ok now
}
#banner : big : block : bubble : digital : ivrit : lean : mini : mnemonic : script : shadow : slant : small : smscript : smshadow : smslant : standard : term :

print_func_test(){
    print func
}
print_g(){
    (
    [ $# -gt 1 ] || { echo "$@";return; }  
    local type="$1"
    #local sub_type="$2"
    #shift
    shift
    local str="${@:-}"
    local cmd=''

    #depend
    #echo "type: $type "






    case "$type" in
        metal)
            toilet --metal "$str"
            ;;
        gay)
            toilet --gay "$str"
            ;;

        notify-send)
            notify-send $str
            ;;
        xcowsay)
            xcowsay $str
            ;;
        toilet)
            toilet "$str"
            ;;
        figlet)
            figlet "$str"
            ;;
        pv)
            use pv1
            pv1 "$str"
            ;;
        **)
            str="`caller`"
            print color 31 "[type] $type - not exist - fallback to echo"
            #echo 'showfigfont?'

            print color 31 "$str"
            #echo `showfigfonts | grep : `

            #exit 1
            ;;
    esac


    )

    return 1
}

printn(){
    #set -o nounset
    use times1
    use trace
    [ $# -gt 0 ] || { echo "$@";return; }  
    local type="$1"
    shift
    local str="$@"
    local cmd=''
    case "$type" in
        func)
            local funcname="${FUNCNAME[2]}" #caller is 2 funcs before
            print line "$funcname:  $str"

            ;;

        trace)

            trace $str
            ;;
        ok)
            print_color  32 ": $str"
            ;;
        color)
             
            print_color_n $str
            ;;
        error)
            print_color  31 ": $str"
            ;;
        line)
            if [ -n "$str" ];then
                local str_res=$( echo "$str" | wc -c )
                local str_times=$( times1 "$str_res" "_" )
                echo  1>&2 "                ${str_times}"

                echo -en 1>&2 '_______________/'
                echo -n 1>&2  "$str "
                echo -e 1>&2 '\________________'
            else
                echo -en 1>&2 '_________________'
                echo -e 1>&2 '_________________'
            fi
            ;;
        shlvl)
            print_color_n 33 "[SHLVL] $SHLVL"
            ;;
        caller)
            str="${str:-}"
            print_color_n 36 "[CALLER] $str"
            #print_color_n 36 "[CALLER] $str"
            ;;
        fortune)
            fortune
            ;;
        warning)
            print_color_n  33 "[WARNING!] $str"
            ;;
        pending)
            print_color_n  34 "[PENDING] $str"
            ;;

        **)
            echo 1>&2 "$type $str"
            ;;
    esac
}
print(){
    #        CALL DIRECTLY printn FOR AVOIDING endl 
    #trace "`caller`"
    local    args=($@)
    local    cmd="${args[@]}"
    printn $cmd
    echo
    set +u
    set +e
}
print_color(){
local cmd="print_color_n $@"
#echo $cmd
$cmd
echo 1>&2
}
export -f print
export -f print_g
export -f printn
export -f print_color_n 
export -f print_color



#https://wiki.videolan.org/Documentation:Command_line/
#% vlc --fullscreen file1.mpg :sub-file=file1.srt :no-fullscreen file2.mpg :filter=distort


#--brightness <float> Image brightness in the 0-2 range.

#--fullscreen
#--start-time <integer> starts the video here; the integer is the number of seconds from the beginning (e.g. 1:30 is written as 90)
#--stop-time <integer> stops the video here; the integer is the number of seconds from the beginning (e.g. 1:30 is written as 90)

play_chunk(){
    #type: audio or video
    #file: path
    #from:second
    #to: second

    assert left_bigger $# 2
    local type=$1
    local file="$2"
    local chunk=$3

    assert var_exist delta 


    #### calculate: $to
    let "from = $chunk * $delta"
    let "to=$from+$delta"

    print_color 33 "from: $from"
    print_color 35 "to: $to"

    if [ $type = video ];then
        local    args1="$file --start-time=$from --stop-time=$to"
        #--play-and-stop \
        args2="--fullscreen --aspect-ratio=4:3 \
        --no-repeat --no-loop"
        
        
            #--fullscreen' \ 
            local cmd="cvlc $args1 $args2"
commander $cmd
    else
        #play_chunk_audio(){

        local cmd="play $file trim ${from} =${to}"
        commander "$cmd" 2>/dev/null

    fi

}

trimming_steps(){
    print func
    assert left_bigger $# 0 || ( print error "supply: file, type delta chunks"; )



    local file="$1"
local     type=${2:-audio}
    delta=${3:-10}
    local chunks=${4:-0}



    local str=''
    print_color 33 "[file] $file"
    print_color 33 "[delta] $delta"
    print_color 33 "[chunks] $chunks"
    print_color 33 "[type] $type"

    assert file_exist "$file"


    while :;do
        ################ user interactions


        dialog_optional 'continue ?' true
        res=$?

#[ "$MODE_BLATHER" = true ] && ( $dir_blather/ofer.sh )
#[ "$MODE_BLATHER" = true ] && ( killall python2 )
        indicator "$res"

        ################## calculate next chunk
        if [ $res -eq 0 ];then
            let 'chunks += 1'
            str=next
            print_color 32 $str
        else
            str=repeat
            print_color 31 $str
        fi


play_chunk "$type" "'$file'" "$chunks"

    done


}
export -f trimming_steps
export -f play_chunk

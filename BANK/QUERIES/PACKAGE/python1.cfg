#!/bin/bash

python_install(){
use commander
#Finally, you may not be able to control the script calls, but there is a way to
#trick the environment. It only works if the scripts use #!/usr/bin/env python,
#it won't work with #!/usr/bin/python. This trick relies on env searching for the
#first corresponding entry in the PATH variable. First create a dummy folder.
( mkdir ~/bin )
#Then add a symlink 'python' to python2 and the config scripts in it.
( ln -s /usr/bin/python2 ~/bin/python )
( ln -s /usr/bin/python2-config ~/bin/python-config )

commander virtualenv2 ~/bin/python2/venv # Creates a directory, venv/, containing the Virtualenv
#Finally put the new folder at the beginning of your PATH variable.
}
python_reset(){

echo 'https://gist.github.com/datagrok/2199506'
    use commander
    (  echo $PATH | grep ~/bin ) || { export PATH=~/bin:$PATH; }
#Note that this change is not permanent and is only active in the current
#terminal session. To check which python interpreter is being used by env, use
#the following command:
commander which python
commander python --version
commander source ~/bin/python2/venv/bin/activate
}
dependOnPackage(){
    local package="$1"
    dpkg -L "$package" &>/dev/null || { print error "required package: $package"; }
    
    }

python_install2(){
#url: https://gist.github.com/tolmun/5927398
sudo pacman -S python2-pysqlite python-virtualenv python-virtualenvwrapper python-pip python-docutils pep8-python2 pep8-python3 python-pygments
}

shyaml_readme(){
    local url="https://github.com/0k/shyaml"
        $BROWSER "$url"
}

python_quick_install(){
    pacman -S python-virtualenv
        pacman -S python-virtualenv --noconfirm 
        sudo pacman -S python-virtualenv --noconfirm 
}

python_add_version(){
    dependOnPackage python-virtualenv
    local version=${1:-3}
    print ok "[PYTHON-ENV] Activating version: $version"
        mkdir -p ~/.virtualenvs/my_env${version}
    virtualenv ~/.virtualenvs/my_env${version}
    source ~/.virtualenvs/my_env${version}/bin/activate
        pip install shyaml
}

python_activate(){
#    echo 1>&2 returning
    python_reset
}
python_activate_old(){
    return 0 
    local version=${1:-2.7}
    local dir="$HOME/.virtualenvs/my_env${version}"

    if [ -d "$dir" ];then
        source $dir/bin/activate
    else
        python_add_version "$version"
            fi

            command shyaml &>/dev/null || ( pip install shyaml )
}
python1(){
    python --version
}
python_ls_versions(){
ls ~/.virtualenvs/my_env*
}
export -f python_reset
export -f python_install
export -f python_ls_versions
export -f python_quick_install
export -f python_activate
export -f shyaml_readme
export -f python1

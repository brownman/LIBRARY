#question: which method of error-trapping is the best here?
##
#answer: 1. using: set -e will break this environment and it is easier to print /tmp/$counter.error here
#answer: 2. we want to listen to the first error and eliminate it: option 1::is using a trap ERR and option 2:: eval $cmd > /tmp/err || gxmessage1 /tmp/err
#decision: 
#alias steppingS="source $BASH_SOURCE"
#alias steppingE="vi $BASH_SOURCE"
#trap_err_stepping(){
#xcowsay error
#}
stepper_test(){
  local file=`mktemp`    
#use cat1
use trap_err
    cat > $file <<FILE
    echo 1
    echo 2;
FILE
#cat1 $file true
    ( stepper $file )
}
stepper(){
  local file=$1
    while read line;do
      echo "$line"
eval "$line"
    done <$file
}
stepper1(){
  set -x
# echo 1>/tmp/errcode
#setslkdfj something

    local res=0
    set -o nounset 
#print func - later
    shopt -s expand_aliases
#   set -o nounset
##############################   setting traps + locking set of the environment
################################################################################
    local file="$1"
    local mode_verbose="${2:-false}"
    local runner="${3:-eval}"
    local flag_edit_list="${4:-false}"
    use update_clipboard

#        assert file_exist "$file"

    update_clipboard "gvim $file"

    use list_strip
#use mktemp1
    use cat1

# print color 33 '[STEPPER]'
# print color 35 "[mode_verbose] $mode_verbose"
    local filename=`basename $file | cut -d'.' -f1`

    if [ $flag_edit_list = true ];then

      dependOn GUI/dialog_optional.cfg dialog_optional 
        (dialog_optional "${filename}" false EDIT? )  && ( gvim "$file" ) 
        fi

        print line "stepper: $filename"

        alias 0S="gvim $file"

        local file_list=`mktemp $file`

        (         list_strip "$file" "$file_list" ) || { return 1; }


  alias 0="cat1 $file_list"


#        commander "assert file_exist '$file_list'"
    print line
    cat1 $file_list true
    print line
#printn color 32 ' [ FILE LIST ] '
    max=$( cat  $file_list | wc -l )
    echo "[MAX] $max"
#read1

#stepping "$mode_verbose" "$runner" reset 

#    [ "$1" = reset ] && { echo;echo "[STEPPER]"; export counter=1; }
    print color 33 "[MODE VERBOSE ? ] $mode_verbose"
    sleep 2
    local counter=1
    while read line;do

      echo "gvim $file +${counter}" > /tmp/0
#           stepping "$mode_verbose" "$runner" "$line"
        echo 1>&@ $line
        commander $line
        let 'counter += 1'
        done <$file_list
        res=$?
#  set_errcode $res "all steps passed"


}

stepping(){
#unlock_env 
#show_env
  print func
#first 2 args: mode_verbose:false, runner:eval
# test_err
# shopt -s expand_aliases
#     set -o nounset
#echo $@
    assert left_bigger "$#" 2


    local mode_verbose="$1"
    local runner="$2"
    shift
    shift
    local args=( $@ )
    local line="${args[@]}"



#        if [ "$mode_verbose" = true  ];then
#            clear
#        fi

############### trapping 
#type aliased_trap
#############################



# counter=${counter:-1}
    cmd=$( echo $line | cut -d'#' -f1 )
    desc=$( echo $line | cut -d'#' -f2 )
    printn color 34 "${counter}."

    echo -en  "[ $desc ]"
    echo -e "*** $cmd"

    file_err="/tmp/${counter}.err"
    file_out="/tmp/${counter}.out"
    file_cmd="/tmp/${counter}.cmd"
    file_func="/tmp/${counter}.func"
    file_desc="/tmp/${counter}.desc"

    echo $desc > $file_desc
    echo $cmd > $file_cmd
    chmod u+x $file_cmd
    local cmd1="alias ${counter}='clear;cat /tmp/${counter}*'"
    eval "$cmd1"

#str="$file_cmd"
#cmd1="alias ${counter}S='(set -x;set -e; source $str)'"
#eval "$cmd1"
#cmd1="alias ${counter}E='eval gxmessage -file $str -entry'"
#eval "$cmd1"

    file_out="/tmp/${counter}.out"
    file_err="/tmp/${counter}.err"
    rm1 $file_out
    rm1 $file_err
#xcowsay "mode verbose?" "$mode_verbose"
#trap trap_err_stepping
    if [ "$mode_verbose" = true  ];then
      $runner $cmd  || exit_stepping
#{ echo trap_err_setup; }
#( print error "[STEP] $counter";sleep 4; )
    else
      $runner $cmd 1>$file_out 2>$file_err || exit_stepping 
#{ echo trap_err_setup; }
#|| ( xcowsay error )
#(xcowsay error; gxmessage "$counter";print error "[ STEPPING ] $counter";cat $file_err )
        fi
#                                set +o nounset
}
exit_stepping(){

  indicator

    print func

    cat1 $file_err true

    echo "[STEP] $counter"

#set_errcode 1 "STEPPING HAS AN ERROR ON STEP: $counter"


#gxmessage -file "$file_err"
    commander exit 1
}

export -f stepping
export -f stepper
export -f exit_stepping
#export -f trap_err_stepping

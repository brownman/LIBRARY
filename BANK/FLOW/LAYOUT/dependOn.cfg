ttt(){
    dependOnSingle_test 
}
dependOn_test(){
    commander    dependOn PRINT/print.cfg
        commander     dependOn PRINT/printsdklfj.cfg
}
dependOnSingle_test(){

    dependOnSingle summary 
        type summary

#        commander source /home/paretech/Downloads/do_for_others_first/ALL/BASH/CODE/LAYOUT/summary.cfg 
#       type summary



#dependOnSingle printsdf
#type indicator
}

dependOnMany_test(){
    #set +e
        ( dependOnMany print proxy indicator )
}


dependOnMany(){
    #set +e
#    exec 1>/dev/null
        local list="$@"
        local file

        local file_to_load
# assert file_exist $file_list
        for item in $list;do
#        echo $item
            commander         dependOnSingle "$item"
                done


}

dependOnTool(){
    local str="$1"
        command "$str" &>/dev/null || ( print_color 31 "[ ERROR ] utility not found: $str";sleep 3; )
}


depend_test(){
    depend_on PROXY/random.cfg random
        command random 
        type random
}
dependFind(){
    #set -o nounset
        local item="$1"
        local file_to_load=''
        local file_list=/tmp/sourced_cfg 

        if [ -f $file_list ];then
                local  file="${item}.cfg"
        else
        print error "[ $file_list ] has to be generated to update the index of available library files"
        fi


                ( type $item &>/dev/null )
                local res=$?
                if [ $res -eq 0 ];then
                    echo 1>&2 "already loaded: $item"
                else
                    echo 1>&2 "searching for: $item at $file_list"
                fi


                    local cmd="cat $file_list | grep \/$file -m1"
                        echo "$cmd"
                        file_to_load=$( eval "$cmd"  )

                        if [ -n "$file_to_load" ];then
commander source1 $file_to_load

                        else
                            echo 1>&2 "[ $file_list ] cant find string: [ $file ]"
                        fi
}
dependOnSingle(){
#echo 1>&2 "$(caller)"
#sleep 1
    local runner="$1"

        [ -n "$runner" ] &&  ( type "$runner" &>/dev/null )
        local res0=$?
        if [ $res0 -ne 0 ];then

dependFind $runner 

fi

}
dependOn(){
#    echo `caller`
#    echo deprecated
#    set -o nounset
        local filename="$1"
        local file="$dir_CODE/${filename}"
        if  [ -f $file ];then


            local runner=$(   echo `basename $file` | cut -d'.' -f1  )

                [ -n "$runner" ] &&  ( type "$runner" &>/dev/null )
                local res=$?
                if [ $res -eq 0 ];then
#echo 1>&2 'already loaded: $item'
                    echo -n .
                else
                    source "$file"
                        fi
        else
            print error "no such file: $file "
                fi


}

export -f dependOnMany
export -f dependOnSingle
export -f dependOn
export -f dependOnTool
export -f dependFind

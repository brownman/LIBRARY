==> SC1000.md <==
# $ is not used specially and should therefore be escaped.

==> SC1001.md <==
## This \c will be a regular 'c' in this context.

==> SC1007.md <==
# Remove space after = if trying to assign a value (or for empty string, use var='' ... ).

==> SC1009.md <==
#  The mentioned parser error was in ...

==> SC1010.md <==
## Use semicolon or linefeed before 'done' (or quote to make it literal).

==> SC1015.md <==
## This is a unicode double quote. Delete and retype it.

==> SC1016.md <==
## This is a unicode single quote. Delete and retype it.

==> SC1018.md <==
# This is a &amp;nbsp;. Delete it and retype as space.

==> SC1035.md <==
## You need a space here

==> SC1040.md <==
## When using <<-, you can only indent with tabs.

==> SC1045.md <==
# It's not 'foo &; bar', just 'foo & bar'.

==> SC1068.md <==
# Don't put spaces around the = in assignments.

==> SC1072.md <==
# Unexpected ..

==> Sc1073.md <==
# Couldn't parse this ...

==> SC1077.md <==
# For command expansion, the tick should slant left (` vs Â´).

==> SC1078.md <==
# Did you forget to close this double quoted string?

==> SC1081.md <==
## Scripts are case sensitive. Use 'if', not 'If'.

==> SC1083.md <==
## This } is literal. Check expression (missing ;/\n?) or quote it.

==> SC2001.md <==
## SC2001: See if you can use ${variable//search/replace} instead.

==> SC2002.md <==
# Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.

==> SC2003.md <==
# expr is antiquated. Consider rewriting this using $((..)), ${} or [[ ]].

==> Sc2004.md <==
# $/${} is unnecessary on arithmetic variables.

==> SC2006.md <==
# Use $(..) instead of deprecated \`..\` 

==> SC2009.md <==
## SC2009 Consider using pgrep instead of grepping ps output.

==> SC2013.md <==
# To read lines rather than words, pipe/redirect to a 'while read' loop.

==> SC2015.md <==
# Note that A && B || C is not if-then-else. C may run when A is true.

==> SC2016.md <==
# Expressions don't expand in single quotes, use double quotes for that.

==> SC2020.md <==
# tr replaces sets of chars, not words (mentioned due to duplicates).

==> SC2022.md <==
# Note that unlike globs, o* here matches 'ooo' but not 'oscar'

==> SC2024.md <==
# SC2024 sudo doesn't affect redirects. Use ..| sudo tee file

==> SC2025.md <==
# Make sure all escape sequences are enclosed in \[..\] to prevent line wrapping issues

==> SC2026.md <==
## Consider using grep -c instead of grep|wc.

==> SC2027.md <==
## The surrounding quotes actually unquote this. Remove or escape them.

==> SC2028.md <==
# echo won't expand escape sequences. Consider printf. 

==> SC2030.md <==
# Modification of var is local (to subshell caused by pipeline).

==> SC2031.md <==
# var was modified in a subshell. That change might be lost.

==> SC2032.md <==
# Use own script or sh -c '..' to run this from su.

==> SC2033.md <==
# Shell functions can't be passed to external commands.

==> SC2034.md <==
# foo appears unused. Verify it or export it.

==> Sc2035.md <==
# Use ./*.m3u so names with dashes won't become options.

==> SC2038.md <==
## Use -print0/-0 or find -exec + to allow for non-alphanumeric filenames.

==> SC2039.md <==
## #!/bin/sh was specified, but _____ is not standard.

==> SC2040.md <==
## #!/bin/sh was specified, so ____ is not supported, even when sh is actually bash.

==> SC2043.md <==
## This loop will only run once, with var=value

==> Sc2044.md <==
## For loops over find output are fragile. Use find -exec or a while read loop.

==> Sc2045.md <==
## Iterating over ls output is fragile. Use globs.

==> Sc2046.md <==
# Quote this to prevent word splitting

==> SC2048.md <==
## Use "$@" (with quotes) to prevent whitespace problems.

==> SC2051.md <==
## Bash doesn't support variables in brace range expansions.

==> SC2059.md <==
# Don't use variables in the printf format string. Use printf "..%s.." "$foo".

==> SC2060.md <==
# Quote parameters to tr to prevent glob expansion.

==> Sc2062.md <==
# Quote the grep pattern so the shell won't interpret it.

==> SC2063.md <==
# Grep uses regex, but this looks like a glob.

==> SC2064.md <==
## Use single quotes, otherwise this expands now rather than when signalled.

==> SC2066.md <==
## Since you double quoted this, it will not word split, and the loop will only run once.

==> SC2067.md <==
## Missing ';' or + terminating -exec. You can't use |/||/&&, and ';' has to be a separate, quoted argument.

==> SC2068.md <==
## Add double quotes around ${@}, otherwise it's just like $* and breaks on spaces.

==> SC2069.md <==
The order of the 2>&1 and the redirect matters. The 2>&1 has to be last.
==> SC2072.md <==
## Decimals are not supported. Either use integers only, or use bc or awk to compare.

==> SC2077.md <==
## You need spaces around the comparison operator.

==> Sc2086.md <==
#Double quote to prevent globbing and word splitting.

==> SC2088.md <==
## Note that ~ doesn't expand in quotes.

==> SC2089.md <==
# Quotes/backslashes will be treated literally. Use an array.

==> SC2090.md <==
# Quotes/backslashes in this variable will not be respected.

==> SC2094.md <==
# SC2094 Make sure not to read and write the same file in the same pipeline.

==> SC2096.md <==
## On most OS, shebangs can only specify a single parameter.

==> SC2097.md <==
## This assignment is only seen by the forked process.

==> SC2098.md <==
## This expansion will not see the mentioned assignment.

==> SC2101.md <==
# Named class needs outer [], e.g. [[:digit:]\].

==> SC2103.md <==
# Consider using ( subshell ), 'cd foo||exit', or pushd/popd instead.

==> SC2116.md <==
## SC2116 Useless echo? Instead of 'cmd $(echo foo)', just use 'cmd foo'.

==> SC2117.md <==
## To run commands as another user, use su -c or sudo.

==> SC2119.md <==
# Use foo "$@" if function's $1 should mean script's $1.

==> SC2120.md <==
# foo references arguments, but none are ever passed.

==> SC2121.md <==
# To assign a variable, use just 'var=value', no 'set ..'.

==> SC2122.md <==
## >= is not a valid operator. Use '! a < b' instead.

==> SC2123.md <==
## PATH is the shell search path. Use another name.

==> SC2124.md <==
## Assigning an array to a string! Assign as array, or use * instead of @ to concatenate.

==> SC2125.md <==
## Brace expansions and globs are literal in assignments. Quote it or use an array.

==> SC2128.md <==
## Expanding an array without an index only gives the first element.

==> SC2129.md <==
## Consider using { cmd1; cmd2; } >> file instead of individual redirects.

==> SC2130.md <==
## -eq is for integer comparisons. Use = instead.

==> SC2139.md <==
## This expands when defined, not when used. Consider escaping.

==> SC2140.md <==
## The double quotes around this do nothing. Remove or escape them.

==> SC2141.md <==
## Did you mean IFS=$'\t' ?

==> SC2142.md <==
## Aliases can't use positional parameters. Use a function.

==> SC2143.md <==
## Instead of [ -n $(foo | grep bar) ], use  foo | grep -q bar .

==> SC2144.md <==
##  -e doesn't work with globs. Use a for loop.

==> SC2145.md <==
## Argument mixes string and array. Use * or separate argument.

==> SC2146.md <==
## This action ignores everything before the -o. Use \\( \\) to group.

==> SC2147.md <==
##  Literal tilde in PATH works poorly across programs.

==> SC2148.md <==
##  Include a shebang (#!) to specify the shell.

==> SC2149.md <==
## Remove $/${} for numeric index, or escape it for string.

==> tags.txt <==
==> Directive.md <==

==> Template.md <==
## (Message goes here)

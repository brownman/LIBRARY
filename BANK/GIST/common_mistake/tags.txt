SC1000: $ is not used specially and should therefore be escaped.
SC1001: This \c will be a regular 'c' in this context.
SC1007: Remove space after = if trying to assign a value (or for empty string, use var='' ... ).
SC1009: The mentioned parser error was in ...
SC1010: Use semicolon or linefeed before 'done' (or quote to make it literal).
SC1015: This is a unicode double quote. Delete and retype it.
SC1016: This is a unicode single quote. Delete and retype it.
SC1018: This is a &amp;nbsp;. Delete it and retype as space.
SC1035: You need a space here
SC1040: When using <<-, you can only indent with tabs.
SC1045: It's not 'foo &; bar', just 'foo & bar'.
SC1068: Don't put spaces around the = in assignments.
SC1072: Unexpected ..
Sc1073: Couldn't parse this ...
SC1077: For command expansion, the tick should slant left (` vs Â´).
SC1078: Did you forget to close this double quoted string?
SC1081: Scripts are case sensitive. Use 'if', not 'If'.
SC1083: This } is literal. Check expression (missing ;/\n?) or quote it.
SC2001: See if you can use ${variable//search/replace} instead.
SC2002: Useless cat. Consider ' < file | ..' or ' file | ..' instead.
SC2003: expr is antiquated. Consider rewriting this using $((..)), ${} or [[ ]].
Sc2004: $/${} is unnecessary on arithmetic variables.
SC2006: Use $(..) instead of deprecated \`..\` 
SC2009: Consider using pgrep instead of grepping ps output.
SC2013: To read lines rather than words, pipe/redirect to a 'while read' loop.
SC2015: Note that A && B || C is not if-then-else. C may run when A is true.
SC2016: Expressions don't expand in single quotes, use double quotes for that.
SC2020: tr replaces sets of chars, not words (mentioned due to duplicates).
SC2022: Note that unlike globs, o* here matches 'ooo' but not 'oscar'
SC2024: SC2024 sudo doesn't affect redirects. Use ..| sudo tee file
SC2025: Make sure all escape sequences are enclosed in \[..\] to prevent line wrapping issues
SC2026: Consider using grep -c instead of grep|wc.
SC2027: The surrounding quotes actually unquote this. Remove or escape them.
SC2028: echo won't expand escape sequences. Consider printf. 
SC2030: Modification of var is local (to subshell caused by pipeline).
SC2031: var was modified in a subshell. That change might be lost.
SC2032: Use own script or sh -c '..' to run this from su.
SC2033: Shell functions can't be passed to external commands.
SC2034: foo appears unused. Verify it or export it.
Sc2035: Use ./*.m3u so names with dashes won't become options.
SC2038: Use -print0/-0 or find -exec + to allow for non-alphanumeric filenames.
SC2039: :!/bin/sh was specified, but _____ is not standard.
SC2040: :!/bin/sh was specified, so ____ is not supported, even when sh is actually bash.
SC2043: This loop will only run once, with var=value
Sc2044: For loops over find output are fragile. Use find -exec or a while read loop.
Sc2045: Iterating over ls output is fragile. Use globs.
Sc2046: Quote this to prevent word splitting
SC2048: Use "$@" (with quotes) to prevent whitespace problems.
SC2051: Bash doesn't support variables in brace range expansions.
SC2059: Don't use variables in the printf format string. Use printf "..%s.." "$foo".
SC2060: Quote parameters to tr to prevent glob expansion.
Sc2062: Quote the grep pattern so the shell won't interpret it.
SC2063: Grep uses regex, but this looks like a glob.
SC2064: Use single quotes, otherwise this expands now rather than when signalled.
SC2066: Since you double quoted this, it will not word split, and the loop will only run once.
SC2067: Missing ';' or + terminating -exec. You can't use |/||/&&, and ';' has to be a separate, quoted argument.
SC2068: Add double quotes around ${@}, otherwise it's just like $* and breaks on spaces.
SC2069: The order of the 2>&1 and the redirect matters. The 2>&1 has to be last.
SC2072: Decimals are not supported. Either use integers only, or use bc or awk to compare.
SC2077: You need spaces around the comparison operator.
Sc2086: Double quote to prevent globbing and word splitting.
SC2088: Note that ~ doesn't expand in quotes.
SC2089: Quotes/backslashes will be treated literally. Use an array.
SC2090: Quotes/backslashes in this variable will not be respected.
SC2094: Make sure not to read and write the same file in the same pipeline.
SC2096: On most OS, shebangs can only specify a single parameter.
SC2097: This assignment is only seen by the forked process.
SC2098: This expansion will not see the mentioned assignment.
SC2101: Named class needs outer [], e.g. [[:digit:]\].
SC2103: Consider using ( subshell ), 'cd foo||exit', or pushd/popd instead.
SC2116: Useless echo? Instead of ' $(echo foo)', just use ' foo'.
SC2117: To run commands as another user, use su -c or sudo.
SC2119: Use foo "$@" if function's $1 should mean script's $1.
SC2120: foo references arguments, but none are ever passed.
SC2121: To assign a variable, use just 'var=value', no 'set ..'.
SC2122: >= is not a valid operator. Use '! a < b' instead.
SC2123: PATH is the shell search path. Use another name.
SC2124: Assigning an array to a string! Assign as array, or use * instead of @ to concatenate.
SC2125: Brace expansions and globs are literal in assignments. Quote it or use an array.
SC2128: Expanding an array without an index only gives the first element.
SC2129: Consider using { 1; 2; } >> file instead of individual redirects.
SC2130: -eq is for integer comparisons. Use = instead.
SC2139: This expands when defined, not when used. Consider escaping.
SC2140: The double quotes around this do nothing. Remove or escape them.
SC2141: Did you mean IFS=$'\t' ?
SC2142: Aliases can't use positional parameters. Use a function.
SC2143: Instead of [ -n $(foo | grep bar) ], use  foo | grep -q bar .
SC2144: -e doesn't work with globs. Use a for loop.
SC2145: Argument mixes string and array. Use * or separate argument.
SC2146: This action ignores everything before the -o. Use \\( \\) to group.
SC2147: Literal tilde in PATH works poorly across programs.
SC2148: Include a shebang (:!) to specify the shell.
SC2149: Remove $/${} for numeric index, or escape it for string.

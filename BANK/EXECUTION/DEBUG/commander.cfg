commander_lock_file_test(){
  use print
  print func
  (
  local     file=/tmp/1.sh
  echo ' echo hi;sleep 4; echo bye '  > $file
  chmod u+x $file
  commander_lock_file /tmp/1.sh some_file &
  sleep 1
  commander_lock_file /tmp/1.sh some_file &
  sleep 1
  commander_lock_file /tmp/1.sh some_file
  )
  echo
}

commander_test(){
  commander echo hi
}
commander_end(){
  commander $@
  commander flite -t finish
  pipe_translate finish
}
commander_gxmessage(){
  #   local str_caller="`caller`"
  use exiting
  use commander
  use print

  #    local cmd_clip="gvim +$($str_caller)"
  #    print color 33 $cmd_clip
  commander $@ 2>/tmp/err
  local res=$?
  test $res -eq 0 || { $gxmessage1; exiting; } 
  return 0
  #$( gxmessage -file /tmp/err -entrytext "$cmd_clip" -title 'commander: Error' )
}

commander(){
  #pending: commander add a space char - find out why!

  local args=( $@ )
  local cmd="${args[@]}"
  local res

  use_many indicator print trace
  #echo 1>&2 $cmd
  print color 34 "[cmd] $cmd"
  #echo "[ gvim +${str_caller} ] $cmd" >> /tmp/trace
  eval "$cmd"
  res="$?"
  indicator $res
  return $res
}
commander_n(){
  local args=( $@ )
  local cmd="${args[@]}"
  printn color 34 "[cmd] $cmd"
  #setting e + 
  echo "$cmd" >> /tmp/trace
  #eval "$cmd"
  $cmd
  local res="$?"
  indicator $res
  return $res
}

commander_lock_file(){
  use commander
  use print
  local file=$1
  #$( where_am_i $0 )
  local name="$2"
  print func
  commander pid $name lock 

  notify-send start "$name"
  commander_subshell $file 
  notify-send finish "$name"

  commander print_g gay finish $name
  commander pid $name unlock 
}

commander_subshell(){
  use print
  print func 
  ( $@ ) || ( print error )
}

commander_lock_file_old(){

  print func
  local file=${1:-$0}

  print color 33 allow only 1 instance of this command
  naming $file
  locking $file

  trap unlocking SIGTERM
  trap unlocking SIGINT
  trap unlocking EXIT
  if [ $# -gt 1 ];then

    shift
    local args=( $@ )
    local cmd="${args[@]:-}"
    commander "bash -c $file $cmd" 
  else
    commander "bash -c $file"
  fi
  #commander unlocking
}
commander1(){
  local args=( $@ ) 
  local cmd="${args[@]}"
  commander "$cmd" || ( print error "$cmd" ; )
}
commander_fallback(){
  use assert
  use print
  use commander

  assert left_bigger "$#" 1
  local cmd_fallback="$1"
  shift
  local args=( $@ ) 
  local cmd="${args[@]}"
  commander "$cmd" || { print error "$cmd" ; print color 33 "fallback to: $cmd_fallback"; $cmd_fallback; }


}
pid(){

  set -u

  local file="$0"
  local filename="$1"
  local mode="$2"

  #  use ensure
  use exiting
  use assert
  use print
  use commander
  print func
  use trace
  use ensure
  use dialog_optional

  #sleep 5

  #  assert file_exist "$file"
  assert string_has_content "$mode"


  local pid1 msg_locked res
  local file_path=$( where_am_i $file )
  local file_pid="/tmp/${filename}.pid"
  local pid="$$"
  local cmd_unlock="rm  $file_pid"
  local cmd_lock="echo $pid > $file_pid"
  ################
  test -f $file_pid
  res=$?
  ########################
  if [ -f "$file_pid" ];then
    pid1=$( cat "$file_pid" ) 
    msg_locked="notify-send ${filename}_is_locked: $pid";
  fi

  #  trace "file_path: $pid"

  case $mode in
    lock)
      #            ( test -f $file_pid ) && { print_g metal locked; $msg_locked; exiting; } || ( $cmd_lock )
      if [ $res -eq 0 ];then
        commander $cmd_lock
      else
        #commander sleep 300; 
        echo commander $cmd_unlock
        commander $cmd_unlock
( kill $pid1 ) 

      fi
      ;;
    unlock)
      #          ( ! test -f $file_pid ) || ( $cmd_unlock )
      commander   $cmd_unlock
      ;;
    **)
      print error mode not exist: $mode
      exiting
      ;;
  esac

  #set +u
}


export -f commander
export -f commander_fallback
export -f commander_n
export -f commander_lock_file
export -f commander1
export -f commander_subshell
export -f pid
export -f commander_gxmessage

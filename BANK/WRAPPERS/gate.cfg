#!/bin/bash
broadcast0(){
xcowsay "$@"
}

indicator0(){
  local res=$?
  if [ $res -eq 0 ];then
    print_color 32 v
  else
    print_color 31 x
  fi
}
source0(){
  print_func
  local file="$1"
  local cmd

  if [ -f $file ];then

cmd="source $file"
commander0 "$cmd"



  else
    echo 1>&2 "file not found: $file"
  fi
}
breaking(){
local str_caller="`caller`"

  echo 1>&2 "[CALLER] $str_caller"

  echo 1>&2 breaking

  break
}

#load ${@:-}


#self-destruct: set -e while not under eval !
#[SAFE] eval 'set -e' --> trigger the alias locker
#[SAFE] commander0 has to contain: eval "$cmd" and not just: $cmd
#set filetype=sh

set -o nounset
shopt -s expand_aliases

#alias commander0=commander0
#alias log0=log0
#alias trace0=trace01
set_env(){


  print_func
  set_mode
  exports

  finder="$dir_CODE/find.sh"
  export FLAG_CLIP_LOCKED=false

  export file_code=/tmp/errcode
  export file_log0=/tmp/trace0

  #$dir_LIST/list_of_lists.txt

  export errcode=1
  cmd_trap_err='trap trap_err ERR'
  cmd_trap_exit='trap trap_exit EXIT'
  cmd_set_lock='alias set=aliased'
  cmd_trap_lock='alias trap=aliased'


  cmd_start0=testing
  cmd_start1=load

  cat2 $file_list

}

assertEqual(){
  print_func

  local str1="$1"
  local str2="$2"
  echo 1: $str1
  echo 2: $str2

  commander0 test \"${str1}\" = $str2
  local res=$?
  echo result: $res
  exit 0
}


set_mode(){
  print_func
  export SCORE=0
  export MODE_TEST=1
  export MODE_VERBOSE=0
  type set_mode | grep export | sed 's/export//g' | grep -v grep
}

print_color () 
{ 
  if [ $# -gt 1 ]; then
    local color=$1;
    shift;
    local args="$@";
    echo 1>&2 -e "\x1B[01;${color}m[*]\x1B[0m $args "
  fi
}


complain(){
  trace0 "$cmd"; 
  cat2 /tmp/err;
  update_clipboard0 "$cmd_clip";
  exit 1
}

exports(){
  export dir_CODE=$dir_root/LIBRARY
  export dir_LIST=$dir_root/LIST
  export dir_WORKSPACE=$dir_root/.config/$LOGNAME
  export dir_SERVICE=$dir_root/DEV/SERVICE
}
exiting(){
  echo --------------
  echo exiting
  exit
}
testing(){
  #abc=2
  #trace0_var abc
  #str=$( read_tag $file_list prefix )
  #echo _${str}_

  $( commander0 read_tag $file_list vars )
  trace0_var $dir_CODE
}

trace0_var(){
  print_func
  local name=$1
  local str="\$$name"
  echo "NAME: $name"
  local value="$( eval echo $str )"
  echo "VALUE: $value"
}


cat2(){
  local file="$1"
  echo 1>&2 "[File] $file"
  if [ -f $file ];then
    cat $file    | grep -v '\#'
    # | grep -v '^$'
  else 
    echo 1>&2 '[ERROR] no such file: $file'
  fi
}
read_tag(){
  #  print_func
  local file="$1"
  local tag="$2"
  local str=$( cat $file | grep "\#${tag}:" | sed "s_\#${tag}:__g" )
  local res=$?
  #trace0 tag: $tag
  #trace0 res: $res
  #trace0 str: $str
  echo "${str}"
  #return $res
}
validate_var(){
  print_func
  trace0_var vars
  trace0_var parser
  trace0_var prefix
  trace0_var validate

  eval "$vars"
  eval "$validate"
  local res=$?
  echo res: $res
}

simple_loop(){
  print_func
  local file_list="$1"
  #    local verbose="${2:-$MODE_VERBOSE}"

  vars=$( read_tag $file_list vars )
  validate=$( read_tag $file_list validate )
  parser=$(read_tag $file_list parser)
  prefix=$(read_tag $file_list prefix)
  suffix=$(read_tag $file_list suffix)

  #validate_var

  #trace0_var parser
  #trace0_var prefix
  local cmd=''
  local cmd1=''
  local cmd_clip=''

  #list , true, dependOn $dir_CODE
  echo 1>&2 ===================================
  print_func
  local filename=`basename $file_list`
  figlet "$filename"
  echo ---
  echo "[ $file_list" ]
  #echo -
  nl < <(cat $file_list)
  #cat $file_list
  # echo ---
  echo
  local counter=1

  #update_clipboard0 "$cmd_clip";

  while read line;do

    cmd_clip="gvim +${counter} $file_list"
    if [ -n "$line" ];then
      #      $cmd_trap_err
      cmd1=$( eval echo ${prefix}${line}${suffix} )
      #assertEqual "$cmd1" 1
      cmd="$parser $cmd1"
      echo -n "[ $counter ]"
      echo " $line"  | cut -d'#' -f2-
      # eval "$line"

      if [ $MODE_VERBOSE -eq  0 ];then

        commander0 "$cmd"  || complain
      else

        commander0 "$cmd"  2>/tmp/err 1>/tmp/out  || complain
      fi
    else
      echo '[ breaking] '
    fi

    let 'counter += 1'
  done < <( cat2 $file_list )

  echo 1>&2 ===================================
}



update_clipboard0(){

  print_func
  local cmd="$@" 

  if [ $FLAG_CLIP_LOCKED = false ];then

    echo "[CMD] $cmd"
    echo "$cmd" | xsel --clipboard
    export FLAG_CLIP_LOCKED=true
    notify-send ERROR update-clipboard 
  else

    echo "[IGNORE] $cmd"

  fi
}

trace0(){
  echo 1>&2 "$@"
}



test_something(){
  #iksldjfklsjdfkljskldjskl;dfj
  #commander0 set ofer=1
  echo
  #eval 'set ofer'
}

aliased(){
  #  echo  "[WORKING LOCK] $@"
  #echo "`caller`"
  echo 1>&2 -n '+'
  #commander0 sleep 1
  #  commander0 exit 1
}
log0(){
  echo $cmd >> $file_log0
}

commander0(){


  local args=( $@ )
  local cmd="${args[@]}"
  echo 1>&2  "[cmd] $cmd"


  log0 "$cmd"
  eval "$cmd"
  local res=$?

    indicator0 $res
  return $res
}

print_func(){
  local str="${FUNCNAME[1]}"
  echo
  echo 1>&2  "____________________/ $str \_________________"
}

trap_exit(){
  print_func
  print_caller 
}

trap_err(){
  print_func
  #  xcowsay error &

  local str_caller="`caller`"
  #echo 1>&2 "[UPDATE CLIPBOARD]"
  #local cmd="gvim +${str_caller}"
  echo 1>$file_code 
  errcode=1
  set +u
  #  exit 0
}
cleanup(){
  print_func
  test -f $file_log0 && { cat $file_log0 | wc -l ; rm $file_log0; }
}


set_env_inner(){
  print_func

  $cmd_trap_err
  $cmd_trap_lock
  $cmd_set_lock
  test_something
}



intro(){
  print_func
  local type=$1
  shift
  local str="$@"
  local arg=''
  if [ $type -eq 0 ];then
    arg=gay 
  else
    arg=metal
  fi
  cmd="toilet --${arg} $str: $SCORE"
  eval "$cmd"
  sleep 2
}
eat(){
#use: simple_loop
  print_func

  commander0   $cmd_trap_err
  #  commander0  $cmd_trap_exit
  commander0  $cmd_trap_lock
  commander0  $cmd_set_lock
  #set -o nounset
  commander0 simple_loop $file_list 
  #run_list_of_lists

  local res=$?
  unalias set
  unalias trap
  return $res

}

load(){
  local file_list=$1

  let 'num=1'
  print_func
  intro $errcode start 
  #-----------------------
  echo 1 > $file_code #unless proved otherwise
  if [ $errcode -eq 0 ];then
    $cmd_trap_err
    eval eat  $file_list
  else
    (    eval eat $file_list )

  fi
  num=$?
  commander0    set_errcode "$num"
}
print_caller(){
  local num=${1:-1}
  echo 1>&2 "[CALLER] `caller $num`"
}
set_errcode(){
  local   num=${1:-1}

  print_func
  print_caller 2

  print_caller 3

  test $num -eq 0 && { let 'SCORE += 1'; }

  echo $num > $file_code
  #-------------------------
  intro $num end
}

decide(){
  print_func
  local res=1
  local num=1
  if [ -f $file_code ] && [ -s $file_code ];then
    num=$(cat $file_code) 
    #compare string - just incase of invalid file
    if [ "$num" = 0 ];then
      res=0
      let 'SCORE += 1'
    fi
  fi
  commander0 errcode=$res
}

steps(){
  print_func

  set_env
  cleanup
  decide
  $(  eval "echo \$cmd_start${MODE_TEST} $file_list" )
  #unalias commander0
  #unalias trace0
  #unalias log0
  trap - ERR
}
#export -f commander


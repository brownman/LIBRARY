type finder &>/dev/null || { echo 1>&2 source the library first; return 0;  }
#alias useE="gvim $BASH_SOURCE"
#alias useS="source $BASH_SOURCE"

use_test(){
  clear
  local func=${1:-assert}
  local   cmd="use $func"
  echo $cmd
  eval "$cmd"
  sleep 2
  type $func 
  #1>/dev/null
  echo $?
}

use_many(){
  for item in $@;do
    use $item
  done
}

use(){
  set -o nounset
  local str
local filename
  local str0
  local cmd
  local type
  local res
  local file
  local res=1

  str0="${1:-}"
  local act="${2:-}" #edit?
  test $# -gt 0 || { tree -L 2 $dir_CODE/ ; exit 0; }

  #################################
  #dont source again - if already loaded
  local funcname="`basename $str0`"
  ( set -o pipefail;  exec &>/dev/null;  type $funcname | grep function )
  res=$?
  if [ $res -eq 0 ] && [ "$act" != edit ] && [ "$act" != force ];then
    return 0
  fi
  #################################
  cmd="finder $str0"
  #echo "[CMD] $cmd"
  str=$( eval "$cmd" )

  if [ -n "$str" ];then
    file="$str"
filename=$( basename $file )
    cmd="source $file"
    if [ -f "$file" ];then
      if [ "$act" = edit ];then
        vim -f $file
      fi
      log info "[source] $filename"
      eval "$cmd" 
      res=$?
    else
      #echo 1>&2 "file is no longer in the index : $file"
      #echo 1>&2 "please run: updatedb.sh for updating the index!"
      echo 1>&2 "not a file: $file"
      ls -l $file
    fi
  else
    echo 1>&2 "finder return empty string for: $str0"
  fi
  set +e
  set +u
  return $res
}
export -f use
export -f use_many

#kill bg job:
#travis syntax: http://lint.travis-ci.org/
#http://www.grymoire.com/Unix/Sed.html
#http://www.grymoire.com/Unix/Sed.html
#defult: load where_amn_i

shopt -s expand_aliases
set -e
set -u
switch_to(){
  use assert

  depend wmctrl 

  local util="$1"
  local switch_name="${2:-$util}"

  ( commander "wmctrl -a $switch_name" ) || ( commander $util )
}
broadcast(){
  notify-send "$1" "$2" -u critical -t 7000
}


set_env_basic(){
  SHELL=/bin/bash
  PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/games
  TERM=xterm
  #DISPLAY=:0 
  MODE_TEST=false
}

log(){
  local line="$(date +%H:%M) | $0 | $@"
  echo "$line"  >> /tmp/library.log
}


#alias idea='vim ~/idea.yaml'
######################################## traps #############
reminder(){
  type $FUNCNAME
  return
  echo find . -name "*.[ch]" -exec grep -i -H ÃŸearch pharse {} ;
  echo find -not -empty -type f -printf "%s\n" | sort -rn | uniq -d | xargs -I{} -n1
  echo find -type f -size {}c -print0 | xargs -0 md5sum | sort | uniq -w32 --all-repeated=separate


}




trap_err(){
  use print
  #use update_clipboard

  print func

  #$cmd_trap_exit
  #trap  | grep EXIT 

  print error
  #echo "`caller`"
  #echo $str_caller
  $str_caller
  #eval "$str_caller"
  #update_clipboard errr "gvim +${str}"
  #  exit 0
}
trap_exit(){
  local res=${1:-$?}

  #$str_caller
  use print
  use indicator
  print func

  indicator $res


  #return 0
  exit 0
}

export cmd_trap_err='trap trap_err ERR'
export cmd_trap_exit='trap trap_exit EXIT'
$cmd_trap_err
$cmd_trap_exit
export -f trap_err
export -f trap_exit

#############################################################


commander_jail(){
  clear
  use print

  print color 33 '[jail] run safely:'
  print line
  set +e
  ( commander $@ )
  echo 
  print line
}


finder(){
  local util="$dir_CODE/find.sh"
  local str="$1"
  local type="${2:-cfg}"
  local cmd="$util $str $type"
  eval "$cmd" 2>/tmp/err 
  local res=$?
  # test $res -eq 0 || (  echo cat /tmp/err; )
  return $res
}


where_am_i () 
{ 
  local file=${1:-"${BASH_SOURCE[1]}"};
  local rpath=$(readlink -m $file);
  local rcommand=${rpath##*/};
  local str_res=${rpath%/*};
  local dir_self="$( cd $str_res  && pwd )";
  echo "$dir_self"
}

install_anchor(){
  #export
  local filename file_self file_to
  filename=`basename $BASH_SOURCE`
  file_self="$dir_library/$filename"
  file_to=/tmp/$filename

  #install an anchor for any other projects which may use this library 
  if [ ! -L $file_to ] ;then
    ln -s $file_self $file_to
  fi
}




export_vars(){
  if [ $LOGNAME = travis ];then
    echo   export AUDIODEV=null #travis - fix: no audio device 
  fi

  export PATH=$PATH:/usr/local/bin
  export gxmessage1='gxmessage -file /tmp/err -title cmd_err -sticky -ontop -timeout 10'
  export str_caller='eval echo $( caller )'
  export dir_library=$(where_am_i $BASH_SOURCE)
  export dir_CODE=$dir_library/BANK #shorter name
  export file_updatedb="$dir_CODE/updatedb.sh" #index of files under the parent dir
}
export_funcs(){
  export -f finder
  export -f activate_important
  export -f switch_to
  export -f broadcast
  export -f log
  export -f commander_jail 
  local file=$dir_CODE/use.cfg
  #register $file
  source $file

  local file=$dir_CODE/use_sh.cfg
  # register $file 
  source  $file
}

aliases(){
  alias libraryE="vi $BASH_SOURCE"
  alias libraryS="source $BASH_SOURCE"

  alias cd_library='cd $dir_library'
  alias updatedb2='$file_updatedb'
}

activate_important(){
  set +e
  set -u
  echo 1>&2 $BASH_SOURCE

  #type $FUNCNAME
  use ps1
  use ps4
  use indicator
  use print
use trace
  use exiting
  #  use register
  use commander
use expose_var
  use assert
  use dialog_optional
  use ensure

  use history_sync
  use quick_follow
  use quick_remember

  #type print
  use alias
  print ok Activated Important stuff
  set +e
  set +o nounset
}

ensure_index(){
  if [ ! -f /tmp/target ] || [ ! -s /tmp/target ];then
    $dir_CODE/updatedb.sh
  fi
}

step(){
  local cmd="$@"
  cmd="$@"
  #echo "$cmd"
  eval "$cmd"
}

steps_for_lib(){
  #type $FUNCNAME
  step export_vars #dir_library, file_library , dir_CODE( the library BANK/)
  step install_anchor #/tmp/library.cfg
  step ensure_index #index of library files: /tmp/target
  step export_funcs #export -f use
  step aliases  #updatedb+edit self+cd self
  set_env_basic
  #echo step using #utilize: use()
  #using #utilize: use()
}
alias step2='activate_important'
alias vi=vim
steps_for_lib
activate_important
set +u
set +e
